<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 initialize="group_creationCompleteHandler(event)">

	<fx:Script>
		<![CDATA[
			import com.decalrus.config.DecalrusConfig;
			import com.decalrus.model.vo.ModelVO;
			import com.decalrus.model.vo.PreviewVO;
			import com.decalrus.model.vo.TemplateVO;
			import com.decalrus.view.component.custom.ProductConfigurator;
			import com.decalrus.view.component.helper.PopupPanel;
			import com.ryan.geom.FreeTransformManager;

			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;

			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.events.IndexChangeEvent;

			public static const PREVIEW_CHANGE:String = "previewChange";

            public var uuid:String;

			[Bindable]
			public var currentTemplate:TemplateVO;

			[Bindable]
			public var artworkLoaded:Boolean = false;

			[ArrayElementType("com.decalrus.model.vo.PreviewVO")]
			private var _previewCollection:ArrayCollection = new ArrayCollection();

			public var selectedModel:ModelVO = new ModelVO;

			protected var configurator:ProductConfigurator = new ProductConfigurator();

			private var _templates:ArrayCollection;
			private var _fileReference:FileReference;
			private var _popupPanel:PopupPanel;

			public function set previewCollection(value:ArrayCollection):void
			{
				this._previewCollection = value;
				// Clean out artwork that isn't in the preview collection. These are marked for deletion.
				if (value != null && value.length > 0)
				{
					var templateIds:Array = [];
					var previewIds:Array = [];
					var deletedTemplateIds:Array = [];
					var lookupObj:Object = new Object();

					var i:int = 0;

					for (i = 0; i < this.templates.length; i++)
					{
						var templateVO:TemplateVO = this.templates.getItemAt(i) as TemplateVO;
						if (templateVO.modelId == this.currentTemplate.modelId)
						{
							templateIds.push(templateVO.id);
						}
					}

					for (i = 0; i < value.length; i++)
					{
						var previewVO:PreviewVO = value.getItemAt(i) as PreviewVO;
						previewIds.push(previewVO.templateId);
					}

					for each (i in templateIds)
					{
						lookupObj[i] = true;
					}

					for each (i in previewIds)
					{
						if (lookupObj[i])
						{
							delete lookupObj[i];
						}
					}

					for (var str:String in lookupObj)
					{
						deletedTemplateIds.push(parseInt(str));
					}

					for (i = 0; i < deletedTemplateIds.length; i++)
					{
						this.configurator.removeArtwork(deletedTemplateIds[i]);
					}

					if (this.previewCollection.length == 0)
					{
						this.artworkLoaded = false;
					}
				}

				try
				{
					if (this.templates && this.templates.length > 0 && this.currentTemplate != null)
					{
						this.configurator.currentTemplate = this.currentTemplate;
					}
				}
				catch (e:Error)
				{
					trace(e.message);
				}
			}

			public function get previewCollection():ArrayCollection
			{
				return this._previewCollection;
			}

			[Bindable]
			[ArrayElementType("com.decalrus.model.vo.TemplateVO")]
			public function get templates():ArrayCollection
			{
				return this._templates;
			}

			public function set templates(value:ArrayCollection):void
			{
				this._templates = value;
				this.previewCollection = new ArrayCollection();

				if (value != null && value.length > 0)
				{
					this.currentTemplate = value.getItemAt(0) as TemplateVO;
					this.configurator.currentTemplate = this.currentTemplate;
				}

				this.configurator.templates = value;
			}

			public function init():void
			{
				try
				{
					this.configurator.addEventListener(FreeTransformManager.STAGE_MOUSE_UP, this.onStageMouseUp);
				}
				catch (e:Error)
				{
					trace(e.message);
				}
			}

			public function stop():void
			{
				this.configurator.removeEventListener(FreeTransformManager.STAGE_MOUSE_UP, this.onStageMouseUp);
			}

			public function loadArtwork(url:String, userUpload:Boolean = false):void
			{
				this._popupPanel = new PopupPanel();
				this._popupPanel.title = 'Please wait';
				this._popupPanel.message = 'Loading photo...';
				PopUpManager.addPopUp(this._popupPanel, FlexGlobals.topLevelApplication as Sprite, true);
				PopUpManager.centerPopUp(this._popupPanel);
				this.configurator.loadArtwork(url, userUpload);
			}

			public function reset():void
			{
				this.configurator.reset();
				this.previewCollection = new ArrayCollection();
				this.artworkLoaded = false;
				this.currentTemplate = null;
				this.templateButtonBar.selectedIndex = 0;
			}

			public function promptFileUpload():void
			{
				this._fileReference = new FileReference();
				this._fileReference.addEventListener(Event.SELECT, this.onFileSelect);
				this._fileReference.browse([new FileFilter("Images", "*.jpg;*.jpeg;*.gif;*.png;")])
			}
			
			protected function group_creationCompleteHandler(event:FlexEvent):void
			{
				this.spriteVisualElement.addChild(this.configurator);
				this.configurator.addEventListener(ProductConfigurator.IMAGE_READY, this.onImageReady);
				this.configurator.addEventListener(ProductConfigurator.IMAGE_TOO_SMALL, this.onImageTooSmall);
				this.configurator.addEventListener(FreeTransformManager.STAGE_MOUSE_UP, this.onStageMouseUp);
			}

			protected function onFileSelect(e:Event):void
			{
				var urlVars:URLVariables = new URLVariables();
				var request:URLRequest = new URLRequest('/api/upload');
                urlVars.uuid = this.uuid;
				request.data = urlVars;
				this._fileReference.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, this.onImageUploadComplete);
				this._fileReference.addEventListener(IOErrorEvent.IO_ERROR, this.onImageIoError);
				if (this._fileReference.size >= DecalrusConfig.MAX_UPLOAD_SIZE)
				{
					Alert.show("File size cannot exceed " + (Math.round(DecalrusConfig.MAX_UPLOAD_SIZE / 1024)) + " KB.", "Error");
				}
				else if (this._fileReference.size < DecalrusConfig.MIN_UPLOAD_SIZE)
				{
					Alert.show("File size (" + (Math.round(this._fileReference.size / 1024)) + "KB) is too small. File size must be at least " + (Math.round(DecalrusConfig.MIN_UPLOAD_SIZE / 1024)) + " KB.", "Error");
				}
				else
				{
					this._popupPanel = new PopupPanel();
					this._popupPanel.title = 'Please wait';
					this._popupPanel.message = 'Uploading file...';
					PopUpManager.addPopUp(this._popupPanel, FlexGlobals.topLevelApplication as Sprite, true);
					PopUpManager.centerPopUp(this._popupPanel);
					this._fileReference.upload(request, 'file', false);
				}
			}

			protected function onImageUploadComplete(e:DataEvent):void
			{
                this._fileReference.removeEventListener(DataEvent.UPLOAD_COMPLETE_DATA, this.onImageUploadComplete);
				this._fileReference.removeEventListener(IOErrorEvent.IO_ERROR, this.onImageIoError);
				if (this._popupPanel)
				{
					PopUpManager.removePopUp(this._popupPanel);
				}
				this.loadArtwork(e.data, true);
			}

			protected function onImageIoError(e:IOErrorEvent):void
			{
				if (this._popupPanel)
				{
					PopUpManager.removePopUp(this._popupPanel);
				}
				Alert.show("Error uploading image.");
			}

			protected function btnRotateCw_clickHandler(event:MouseEvent):void

			{

				this.configurator.rotate('cw');
				this.generatePreview();

			}

			protected function btnRotateCcw_clickHandler(event:MouseEvent):void

			{

				this.configurator.rotate('ccw');
				this.generatePreview();

			}

			protected function btnReset_clickHandler(event:MouseEvent):void

			{

				this.configurator.setToOriginal();

			}

			protected function onImageReady(e:Event):void
			{
				PopUpManager.removePopUp(this._popupPanel);
				this.artworkLoaded = true;
				this.utilGroup.visible = true;
				this.postionMasks();
				this.generatePreview();
			}

			protected function onImageTooSmall(e:Event):void
			{
				PopUpManager.removePopUp(this._popupPanel);
				this.artworkLoaded = false;
				this.utilGroup.visible = true;
				this.postionMasks();
				this.generatePreview();
				this.btnRemove_clickHandler(null);
			}

			protected function onStageMouseUp(e:Event):void
			{
				this.generatePreview();
			}

			protected function generatePreview(templateVO:TemplateVO = null):void

			{
				if (this.configurator.hasImage == false)
				{
					return;
				}

				if (templateVO == null)
				{
					templateVO = this.currentTemplate;
				}

				this.preview.alpha = 1;
				this.topMask.alpha = 1;
				this.bottomMask.alpha = 1;
				this.leftMask.alpha = 1;
				this.rightMask.alpha = 1;
				this.configurator.hideHandlers();

				// Show preview template image and hide the working template image.
				for (var i:int = 0; i < this.previewCollection.length; i++)
				{
					var vo:PreviewVO = this.previewCollection.getItemAt(i) as PreviewVO;
					if (vo.templateId == templateVO.id)
					{
						this.previewCollection.removeItemAt(i);
					}
				}

				this.utilGroup.visible = this.templateButtonBar.visible = false;

				var bmData:BitmapData = new BitmapData(960, 600, false);
				var rect:Rectangle = new Rectangle(this.template.x, this.templateGroup.y, this.template.width, this.template.height);
				bmData.draw(this, null, null, null, rect, true);

				// Crop whitespace
				var r:Rectangle = bmData.getColorBoundsRect(0xffffff, 0xffffff, false);
				var b:BitmapData = new BitmapData(r.width, r.height, false, 0xffffff);
				b.copyPixels(bmData, r, new Point(0, 0));
				bmData.dispose();

				var scale:Number = 0.75; // Was 0.5
				// TODO Fiddle with this.
				if (r.width > 500)
				{
					scale = 0.6;
				}
				var matrix:Matrix = new Matrix();
				matrix.scale(scale, scale);

				var scaledBitmapData:BitmapData = new BitmapData(b.width * scale, b.height * scale, false, 0xffffff);
				scaledBitmapData.draw(b, matrix, null, null, null, true);

				var previewVO:PreviewVO = new PreviewVO();
				previewVO.templateId = templateVO.id;
				previewVO.templateName = templateVO.name;
				previewVO.productId = templateVO.modelId;
				previewVO.bitmapData = scaledBitmapData;
				previewVO.artworkUrl = this.configurator.currentArtworkUrl;
                trace('gen preview, artworkUrl: ' + previewVO.artworkUrl);

				this.previewCollection.addItem(previewVO);
				var sortField:SortField = new SortField('templateId');
				var sort:Sort = new Sort();
				sort.fields = [sortField];
				this.previewCollection.sort = sort;
				this.previewCollection.refresh();

				this.utilGroup.visible = this.templateButtonBar.visible = true;
				this.configurator.showHandlers();
				this.preview.alpha = 0.5;
				this.topMask.alpha = 0.5;
				this.bottomMask.alpha = 0.5;
				this.leftMask.alpha = 0.5;
				this.rightMask.alpha = 0.5;

				this.dispatchEvent(new Event(CustomizeComponent.PREVIEW_CHANGE));

			}

			protected function btnRotateCw_rollOverHandler(event:MouseEvent):void

			{

				var img:Image = event.currentTarget as Image;
				img.alpha = 0.8;

			}

			protected function btnRotateCw_rollOutHandler(event:MouseEvent):void

			{

				var img:Image = event.currentTarget as Image;
				img.alpha = 1;

			}

			protected function btnRotateCw_mouseDownHandler(event:MouseEvent):void

			{

				var img:Image = event.currentTarget as Image;
				img.alpha = 0.5;

			}

			protected function btnExport_clickHandler(event:MouseEvent):void

			{
				this.generatePreview();

			}

			protected function template_updateCompleteHandler(event:FlexEvent):void

			{
				this.postionMasks();
				CursorManager.removeAllCursors();

			}

			protected function postionMasks():void
			{
				this.bottomMask.y = this.templateGroup.y + this.template.height;
				this.leftMask.x = 0;
				this.leftMask.width = (960 - this.template.width) / 2;
				this.leftMask.height = this.template.height;
				this.rightMask.x = this.template.width + this.template.x;
				this.rightMask.width = (960 - this.template.width) / 2;
				this.rightMask.height = this.template.height;
			}

			protected function template_ioErrorHandler(event:IOErrorEvent):void

			{

				Alert.show('Unable to load product template');

			}

			protected function btnRemove_clickHandler(event:MouseEvent):void

			{
				this.configurator.removeArtwork(this.currentTemplate.id);
				for (var i:int = 0; i < this.previewCollection.length; i++)
				{
					var vo:PreviewVO = this.previewCollection.getItemAt(i) as PreviewVO;
					if (vo.templateId == this.currentTemplate.id)
					{
						this.previewCollection.removeItemAt(i);
					}
				}
				this.artworkLoaded = false;
				this.dispatchEvent(new Event(CustomizeComponent.PREVIEW_CHANGE));
			}

			protected function templateButtonBar_changeHandler(event:IndexChangeEvent):void
			{

				this.artworkLoaded = false;

				this.currentTemplate = this.templates.getItemAt(event.newIndex) as TemplateVO;
				this.configurator.currentTemplate = this.currentTemplate;

			}

			protected function template_progressHandler(event:ProgressEvent):void

			{

				CursorManager.setBusyCursor();

			}

		]]>
	</fx:Script>

	<fx:Declarations>
	</fx:Declarations>

	<fx:Metadata>
		[Event(name="previewChange", type="flash.events.Event")]
	</fx:Metadata>

	<s:SpriteVisualElement id="spriteVisualElement" width="100%" y="20" />

	<s:Group id="topMask" x="0" y="-20" width="100%" height="40" mouseChildren="false" mouseEnabled="false">
		<s:Rect x="0" y="0" width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0xffffff" />
			</s:fill>
		</s:Rect>
	</s:Group>

	<s:Group id="leftMask" x="0" y="20" width="100" height="600" mouseChildren="false" mouseEnabled="false">
		<s:Rect x="0" y="0" width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0xffffff" />
			</s:fill>
		</s:Rect>
	</s:Group>

	<s:Group id="rightMask" x="0" y="20" width="100" height="600" mouseChildren="false" mouseEnabled="false">
		<s:Rect x="0" y="0" width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0xffffff" />
			</s:fill>
		</s:Rect>
	</s:Group>

	<s:HGroup id="templateGroup" width="100%" horizontalAlign="center" y="20" mouseChildren="false" mouseEnabled="false" includeInLayout="true" visible="true">
		<s:Image id="template" source="{this.currentTemplate.artworkUrl}" mouseChildren="false" mouseEnabled="false" smooth="true"
				 progress="template_progressHandler(event)"
				 updateComplete="template_updateCompleteHandler(event)" ioError="template_ioErrorHandler(event)"  />
	</s:HGroup>

	<s:HGroup id="previewGroup" width="100%" horizontalAlign="center" y="20" mouseChildren="false" mouseEnabled="false">
		<s:Image id="preview" source="{this.currentTemplate.previewUrl}" mouseChildren="false" mouseEnabled="false" smooth="true" />
	</s:HGroup>

	<s:Group id="bottomMask" x="0" y="525" width="100%" height="100" mouseChildren="false" mouseEnabled="false">
		<s:Rect x="0" y="0" width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0xffffff" />
			</s:fill>
		</s:Rect>
	</s:Group>

	<s:VGroup id="utilGroup" y="50" x="10" visible="{this.artworkLoaded}">
		<s:Image id="btnRotateCw" source="@Embed('/assets/images/btn-rotate-cw.png')"
				 rollOver="btnRotateCw_rollOverHandler(event)"
				 rollOut="btnRotateCw_rollOutHandler(event)"
				 mouseDown="btnRotateCw_mouseDownHandler(event)"
				 click="btnRotateCw_clickHandler(event)" toolTip="Rotate clockwise" />
		<s:Image id="btnRotateCcw" source="@Embed('/assets/images/btn-rotate-ccw.png')"
				 rollOver="btnRotateCw_rollOverHandler(event)"
				 rollOut="btnRotateCw_rollOutHandler(event)"
				 mouseDown="btnRotateCw_mouseDownHandler(event)"
				 click="btnRotateCcw_clickHandler(event)" toolTip="Rotate counter clockwise" />
		<s:Image id="btnRemove" source="@Embed('/assets/images/btn-remove.png')"
				 rollOver="btnRotateCw_rollOverHandler(event)"
				 rollOut="btnRotateCw_rollOutHandler(event)"
				 mouseDown="btnRotateCw_mouseDownHandler(event)"
				 click="btnRemove_clickHandler(event)" toolTip="Remove artwork" />
	</s:VGroup>

	<s:Rect radiusX="10" radiusY="10" width="{this.templateButtonBar.width + 5}" height="{this.templateButtonBar.height + 10}"
			x="{this.templateButtonBar.x - 10}" y="-14">
		<s:fill>
			<s:SolidColor color="0xf0f0f0" />
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="0x999999" weight="2" />
		</s:stroke>
	</s:Rect>

	<s:HGroup width="100%" horizontalAlign="center" y="-8">
		<s:ButtonBar id="templateButtonBar" requireSelection="true" labelField="name"
					 skinClass="com.decalrus.view.component.skin.RadioButtonBar" dataProvider="{this.templates}"
					 change="templateButtonBar_changeHandler(event)" />
	</s:HGroup>

</s:Group>
